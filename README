## freeDiameter is an implementation of the Diameter protocol.

Diameter is a protocol designed to carry Authentication, Authorization and
Accounting (AAA) payload. It is an evolution of the RADIUS protocol (as the
name suggests).

Diameter is an extensible protocol. RFC3588 (currently under revision) defines the
Base Protocol that all Diameter nodes must support, while other documents define
the additional protocol support for specific applications. Such applications include
for example Network Access Servers (RFC4005), EAP (RFC4072), ...

The implementation consists in several components:

- libfdproto : this shared library provides the functions to manipulate Diameter
  messages and dictionary. This library is meant to be re-used by other projects
  that would require parsing or manipulating Diameter messages.
- libfdcore : this shared library contains the core of the framework. It establishes
  the network connections with other Diameter peers and performs the tasks described
  in Diameter Base Protocol, such as watchdogs, basic routing, ... It also handles
  the loading of extensions (see below).
- freeDiameterd : this simple daemon parses the command line and initializes the
  freeDiameter framework. Use it for your Diameter server & agent components.
  In case of Diameter clients, you probably will prefer linking the libfdcore
  directly with your client application that must be made Diameter-aware.
- extensions : the extensions provide the mean to augment the features of the
  freeDiameterd framework. Extensions can provide the handling of a Diameter
  server application, but also advanced routing features, peer management, etc.

## This project contains a custom Gy interface plugin (`dcca_gy.c`) implementing basic Credit-Control-Request (CCR) message handling.

## Requirements

Ensure you have the following installed:

- GCC (GNU Compiler Collection)
- `pkg-config`
- FreeDiameter and development headers (`libfreediameter-dev`)

# Certitifcate creation

- Create certificates from AWS Certificate manager using AWS private certificate authourity with the domain name same as the identity name in free diameter.conf file.

- Add the key and certificate locations in freeDiameter.conf file.

- Refer this documentation for detailed steps https://docs.google.com/document/d/1GpNq4PKzt852efdc9B0hu7Tz9ht0nG8oHtaRlBY-ljU/edit?tab=t.0

# To create free diameter configuration:

- Once the certificates are created, we can add the following parameters in freeDiamater.conf file

Realm=<realm_name>
ListenOn=<server_ip>
ConnectPeer=<client_identity>


# To add environment variables to the docker container:

- Create .env file and add the following environment variables,

1. GY_APPLICATION_ID <Gy Application Id. Sample: 16777238>

# To push them into ECR container registry

1. Create AWS profile with access key and secret access key

2. Export AWS profile using the following command in integrated terminal.
``` 
export AWS_PROFILE=<profile-name>
```

3. Login to the ECR container registry using the following command

```
aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin <arn for the ECR registry>
```

- We can now build the docker file using the following command and it will automatically push the image to the ECR

```
docker buildx build \
 --platform linux/amd64 \
 -t 519139470698.dkr.ecr.ap-southeast-1.amazonaws.com/diameterimage:latest \
 --push .
```

# To create deployments in kubectl

1. Once the image is pushed into ECR, we can then update out kubectl configuration using the following command.

```
aws eks update-kubeconfig --region ap-southeast-1 --name <name of eks cluster>
```

2. Create the namespace in EKS by using the following command

```
kubectl apply -f namespace.yaml
```

3. Create the config map in EKS using the following command

```
kubectl create configmap freediameter-config \
  --from-file=freeDiameter.conf=./freeDiameter.conf \
  -n diameter
```
4. Create the envoy container config map for exposing the freediameter server to external communication as TCS proxy using following command

```
kubectl apply -f envoy.yaml
```

5. Create the deployment in EKS using the following command

```
 kubectl apply -f deployment.yaml
```

6. We can check out the pod creation status using the following command,


```
 kubectl get pods --namespace=diameter
```

7. We have to expose the free diameter service using the envoy with following command,

```
kubectl apply -f service.yaml
```



