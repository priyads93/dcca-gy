## freeDiameter is an implementation of the Diameter protocol.

Diameter is a protocol designed to carry Authentication, Authorization and
Accounting (AAA) payload. It is an evolution of the RADIUS protocol (as the
name suggests).

Diameter is an extensible protocol. RFC3588 (currently under revision) defines the
Base Protocol that all Diameter nodes must support, while other documents define
the additional protocol support for specific applications. Such applications include
for example Network Access Servers (RFC4005), EAP (RFC4072), ...

The implementation consists in several components:

- libfdproto : this shared library provides the functions to manipulate Diameter
  messages and dictionary. This library is meant to be re-used by other projects
  that would require parsing or manipulating Diameter messages.
- libfdcore : this shared library contains the core of the framework. It establishes
  the network connections with other Diameter peers and performs the tasks described
  in Diameter Base Protocol, such as watchdogs, basic routing, ... It also handles
  the loading of extensions (see below).
- freeDiameterd : this simple daemon parses the command line and initializes the
  freeDiameter framework. Use it for your Diameter server & agent components.
  In case of Diameter clients, you probably will prefer linking the libfdcore
  directly with your client application that must be made Diameter-aware.
- extensions : the extensions provide the mean to augment the features of the
  freeDiameterd framework. Extensions can provide the handling of a Diameter
  server application, but also advanced routing features, peer management, etc.

## This project contains a custom Gy interface plugin (`dcca_gy.c`) implementing basic Credit-Control-Request (CCR) message handling.

## Requirements

Ensure you have the following installed:

- GCC (GNU Compiler Collection)
- `pkg-config`
- FreeDiameter and development headers (`libfreediameter-dev`)

# Certitifcate creation

- Create self signed certificates with the domain name same as the identity name in free diameter.conf file using the following command.

```
sudo openssl req -x509 -newkey rsa:2048 \
  -keyout <certificatekeyoutlocation>/key.pem \
  -out  <certificateoutlocation>/cert.pem \
  -days 365 -nodes \
  -subj "/CN=<identity_name>"
```

- Add the key and certificate locations in freeDiameter.conf file.

# To build the docker file:

- Once the certificates are created, we can add the following parameters in freeDiamater.conf file

Realm=<realm_name>
ListenOn=<server_ip>
ConnectPeer=<client_identity>

- We can now build the docker file using the following command 

```
docker build -t diameter:v1 .
```

# To run the docker container:

- Create .env file and add the following environment variables,

1. DB_NAME <PostgreSQL DB Name>
2. DB_USER <PostgreSQL User Name>
3. HOST <PostgreSQL Host Name>
4. PORT <PostgreSQL Port Name>


- Run the container using the following command

```
docker run -p 3868:3868 -p 5868:5868 --env-file .env --rm diameter:v1
```